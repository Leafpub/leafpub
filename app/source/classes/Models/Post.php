<?php
declare(strict_types=1);
/**
 * Leafpub: Simple, beautiful publishing. (https://leafpub.org)
 *
 * @link      https://github.com/Leafpub/leafpub
 * @copyright Copyright (c) 2016 Leafpub Team
 * @license   https://github.com/Leafpub/leafpub/blob/master/LICENSE.md (GPL License)
 */

namespace Leafpub\Models;

use Leafpub\Events\Post\Add;
use Leafpub\Events\Post\Added;
use Leafpub\Events\Post\BeforeRender;
use Leafpub\Events\Post\Delete;
use Leafpub\Events\Post\Deleted;
use Leafpub\Events\Post\ManyRetrieve;
use Leafpub\Events\Post\ManyRetrieved;
use Leafpub\Events\Post\Retrieve;
use Leafpub\Events\Post\Retrieved;
use Leafpub\Events\Post\Update;
use Leafpub\Events\Post\Updated;
use Leafpub\Leafpub;
use Leafpub\Renderer;
use Leafpub\Session;
use Leafpub\Theme;

class Post extends AbstractModel
{
    /**
     * Constants
     **/
    public const ALREADY_EXISTS = 1;
    public const INVALID_SLUG = 2;
    public const INVALID_USER = 3;
    public const NOT_FOUND = 4;
    protected static ?\Leafpub\Models\Tables\Post $_instance = null;

    protected static array $allowedCaller = [
        'Leafpub\\Controller\\AdminController',
        'Leafpub\\Controller\\APIController',
        'Leafpub\\Models\\Post',
        'Leafpub\\Importer\\AbstractImporter',
    ];

    /**
     * Gets multiple posts. Returns an array of posts on success, false if not found. If $pagination
     * is specified, it will be populated with pagination data generated by Leafpub::paginate().
     *
     * If a query is specified, this method will perform a full text search with basic scoring, very
     * similar to the solution recommended here: http://stackoverflow.com/a/600915/567486
     *
     * @param null $options
     * @param null $pagination
     *
     * @return mixed
     *
     **/
    public static function getMany(array $options = [], &$pagination = null)
    {
        // Merge options with defaults
        $options = array_merge([
            'author' => null,
            'end_date' => date('Y-m-d H:i:s'),
            'status' => 'published',
            'show_featured' => false,
            'ignore_featured' => false,
            'ignore_sticky' => false,
            'ignore_pages' => true,
            'ignore_posts' => false,
            'items_per_page' => 10,
            'page' => 1,
            'query' => null,
            'start_date' => null,
            'tag' => null,
            'sort' => 'DESC',
        ], (array) $options);

        $evt = new ManyRetrieve($options);
        Leafpub::dispatchEvent(ManyRetrieve::NAME, $evt);
        $options = $evt->getEventData();

        // Convert dates to UTC
        if (isset($options['start_date'])) {
            $start_date = Leafpub::localToUtc($options['start_date']);
        }
        if (isset($options['end_date'])) {
            $end_date = Leafpub::localToUtc($options['end_date']);
        }

        // If there's a query of > 4 chars, make it a fulltext search
        $is_fulltext = isset($options['query']) && strlen($options['query']) >= 4;

        $columns = [
            'id', 'slug', 'created', 'pub_date', 'author',
            'title', 'content', 'image', 'meta_title', 'meta_description',
            'status', 'page', 'featured', 'sticky',
        ];

        if ($is_fulltext) {
            $columns['title_score'] = new \Zend\Db\Sql\Expression('MATCH(slug, title) AGAINST (\'' . $options['query'] . '\')');
            $columns['content_score'] = new \Zend\Db\Sql\Expression('MATCH(content) AGAINST (\'' . $options['query'] . '\')');
        }

        $prefix = Tables\TableGateway::$prefix;
        $select = new \Zend\Db\Sql\Sql(self::getModel()->getAdapter());
        $select = $select->select();
        $select->from($prefix . 'view_posts');
        $select->columns($columns);

        $where = function ($wh) use ($options, $is_fulltext, $prefix) {
            // PDO doesn't want to execute the select with 1 = 1'... -_-
            //$wh->expression('1 = 1');

            if ($is_fulltext) {
                // Fulltext search
                $wh->expression('MATCH(slug, title, content) AGAINST(?)', $options['query']);
            } else {
                $wh->expression('CONCAT(slug, title) LIKE ?', '%' . $options['query'] . '%');
            }

            if (isset($options['author'])) {
                $wh->equalTo('author', $options['author']);
            }

            if (isset($options['tag'])) {
                $prefix = Tables\TableGateway::$prefix;
                $wh->expression(
                    '(
                        SELECT COUNT(*) from ' . $prefix . 'tags
                        LEFT JOIN ' . $prefix . 'post_tags ON ' . $prefix . 'post_tags.tag = ' . $prefix . 'tags.id
                        WHERE ' . $prefix . 'post_tags.post = ' . $prefix . 'view_posts.id AND ' . $prefix . 'tags.slug = ?
                    ) = 1',
                    $options['tag']
                );
            }

            if (isset($options['status'])) {
                $wh->in('status', (array) $options['status']);
            }

            if (isset($options['ignore_featured'])) {
                $wh->notEqualTo('featured', 1);
            }

            if (isset($options['ignore_sticky'])) {
                $wh->notEqualTo('sticky', 1);
            }

            if (isset($options['ignore_pages'])) {
                $wh->notEqualTo('page', 1);
            }

            if (isset($options['start_date'])) {
                $wh->greateThanOrEqualTo('pub_date', $options['start_date']);
            }

            if (isset($options['end_date'])) {
                $wh->lessThanOrEqualTo('pub_date', $options['end_date']);
            }
        };

        $select->where($where);

        // Generate order SQL
        if ($is_fulltext) {
            $select->order(new \Zend\Db\Sql\Expression('(title_score * 1.5 + content_score)'));
        } else {
            $select->order('sticky ' . $options['sort'])->order('pub_date ' . $options['sort'])->order('id ' . $options['sort']);
        }

        $total_items = self::count($options);

        // Generate pagination
        $pagination = Leafpub::paginate(
            $total_items,
            $options['items_per_page'],
            $options['page']
        );
        $offset = ($pagination['current_page'] - 1) * $pagination['items_per_page'];
        $count = $pagination['items_per_page'];

        $select->offset($offset);
        $select->limit($count);

        // Run the data query
        try {
            $posts = self::getModel()->selectWith($select)->toArray();
        } catch (\PDOException $e) {
            return false;
        }

        foreach ($posts as $key => $value) {
            $posts[$key] = self::normalize($value);
        }

        $evt = new ManyRetrieved($posts);
        Leafpub::dispatchEvent(ManyRetrieved::NAME, $evt);
        $posts = $evt->getEventData();

        return $posts;
    }

    /**
     * Gets a single post. Returns an array on success, false if not found.
     *
     * @param string $slug
     *
     * @return mixed
     *
     **/
    public static function getOne($slug)
    {
        $evt = new Retrieve($slug);
        Leafpub::dispatchEvent(Retrieve::NAME, $evt);

        // Retrieve the post
        try {
            $prefix = Tables\TableGateway::$prefix;
            $select = new \Zend\Db\Sql\Sql(self::getModel()->getAdapter());
            $select = $select->select();
            $select->from($prefix . 'view_posts');
            if (is_int($slug)) {
                $select->where(['id' => $slug]);
            } else {
                $select->where(['slug' => $slug]);
            }
            $post = self::getModel()->selectWith($select)->current();
            if (!$post) {
                return false;
            }
        } catch (\PDOException $e) {
            return false;
        }

        // Normalize fields
        $post = self::normalize($post->getArrayCopy());

        $evt = new Retrieved($post);
        Leafpub::dispatchEvent(Retrieved::NAME, $evt);
        return $post;
        #return $evt->getEventData();
    }

    /**
     * Creates a post
     *
     * @param array $post
     *
     * @throws \Exception
     *
     * @return mixed
     *
     **/
    public static function create($post)
    {
        if (!self::isAllowedCaller()) {
            return false;
        }

        // Enforce slug syntax
        $slug = $post['slug'];
        $slug = Leafpub::slug($slug);

        // Is the slug valid?
        if ($slug === '' || Leafpub::isProtectedSlug($slug)) {
            throw new \Exception('Invalid slug: ' . $slug, self::INVALID_SLUG);
        }

        // Does a post already exist here?
        if (self::exists($slug)) {
            throw new \Exception('Post already exists: ' . $slug, self::ALREADY_EXISTS);
        }

        // Parse publish date format and convert to UTC
        $post['pub_date'] = $post['created'] = Leafpub::localToUtc(Leafpub::parseDate($post['pub_date']));

        // Translate author slug to ID
        $post['author'] = User::getId($post['author']);
        if (!$post['author']) {
            throw new \Exception('Invalid user.', self::INVALID_USER);
        }

        // Empty title defaults to settings.default_title
        if (empty($post['title'])) {
            $post['title'] = Setting::getOne('default_title');
        }

        // Empty content defaults to settings.default_content
        if (empty($post['content'])) {
            $post['content'] = Setting::getOne('default_content');
        }

        // Don't allow null properties
        $post['image'] = Upload::getImageId($post['image']) ?: 0;
        $post['meta_title'] = (string) $post['meta_title'];
        $post['meta_description'] = (string) $post['meta_description'];

        // Status must be `published` or `draft`
        if ($post['status'] !== 'draft') {
            $post['status'] = 'published';
        }

        // Page, featured, and sticky must be 1 or 0
        foreach (['page', 'featured', 'sticky'] as $key) {
            $post[$key] = filter_var($post[$key], FILTER_VALIDATE_BOOLEAN) ? 1 : 0;
        }

        $evt = new Add($post);
        Leafpub::dispatchEvent(Add::NAME, $evt);
        $post = $evt->getEventData();
        $tags = $post['tags'];
        unset($post['tags']);
        unset($post['tag_data']);

        try {
            $model = self::getModel();
            $model->insert($post);
            $post_id = (int) $model->getLastInsertValue();
            if ($post_id <= 0) {
                return false;
            }
        } catch (\PDOException $e) {
            throw new \Exception('Database error: ' . $e->getMessage(), $e->getCode(), $e);
        }

        // Set post tags
        self::setTags($post_id, $tags);
        self::setImageToPost($post_id, $post['content']);

        // Create the initial revision
        History::create([$slug, true]);

        $evt = new Added($post_id);
        Leafpub::dispatchEvent(Added::NAME, $evt);

        return $post_id;
    }

    /**
     * Updates a post
     *
     * @param string $slug
     * @param array  $properties
     *
     * @throws \Exception
     *
     * @return bool
     *
     **/
    public static function edit($properties)
    {
        if (!self::isAllowedCaller()) {
            return false;
        }

        if (isset($properties['oldSlug'])) {
            $slug = $properties['oldSlug'];
            unset($properties['oldSlug']);
        } else {
            $slug = $properties['slug'];
        }

        // Get the post
        $post = self::getOne($slug);
        if (!$post) {
            throw new \Exception('Post not found: ' . $slug, self::NOT_FOUND);
        }

        // Merge options
        $post = array_merge($post, $properties);
        $tags = $post['tags'];
        unset($post['tags']);
        unset($post['tag_data']);
        unset($post['media']);
        unset($post['meta']);

        // Parse publish date format and convert to UTC
        $post['pub_date'] = Leafpub::localToUtc(Leafpub::parseDate($post['pub_date']));

        // Translate author slug to ID
        $post['author'] = User::getId($post['author']);
        if (!$post['author']) {
            throw new \Exception('Invalid user.', self::INVALID_USER);
        }

        // Empty title defaults to settings.default_title
        if (empty($post['title'])) {
            $post['title'] = Setting::getOne('default_title');
        }

        // Empty content defaults to settings.default_content
        if (empty($post['content'])) {
            $post['content'] = Setting::getOne('default_content');
        }

        // Don't allow null properties
        $post['image'] = Upload::getImageId($post['image']);
        $post['meta_title'] = (string) $post['meta_title'];
        $post['meta_description'] = (string) $post['meta_description'];

        // Status must be `published` or `draft`
        if ($properties['status'] !== 'draft') {
            $properties['status'] = 'published';
        }

        // Page, featured, and sticky must be 1 or 0
        foreach (['page', 'featured', 'sticky'] as $key) {
            $post[$key] = filter_var($post[$key], FILTER_VALIDATE_BOOLEAN) ? 1 : 0;
        }

        // Change the slug?
        if ($post['slug'] !== $slug) {
            // Enforce slug syntax
            $post['slug'] = Leafpub::slug($post['slug']);

            // Is the slug valid?
            if ($post['slug'] === '' || Leafpub::isProtectedSlug($post['slug'])) {
                throw new \Exception('Invalid slug: ' . $post['slug'], self::INVALID_SLUG);
            }

            // Does a post already exist here?
            if (self::exists($post['slug'])) {
                throw new \Exception('Post already exists: ' . $post['slug'], self::ALREADY_EXISTS);
            }

            // If this is the custom homepage, update settings
            if (Setting::getOne('homepage') === $slug) {
                Setting::update('homepage', $post['slug']);
            }
        }

        $evt = new Update($post);
        Leafpub::dispatchEvent(Update::NAME, $evt);
        $post = $evt->getEventData();

        try {
            self::getModel()->update($post, ['slug' => $slug]);
        } catch (\PDOException $e) {
            throw new \Exception('Database error: ' . $e->getMessage(), $e->getCode(), $e);
        }

        // Set post tags
        self::setTags($post['id'], $tags);
        self::setImageToPost($post['id'], $post['content']);

        // Create a revision
        History::create([$post['slug'], false]);

        $evt = new Updated($post['id']);
        Leafpub::dispatchEvent(Updated::NAME, $evt);

        return true;
    }

    /**
     * Deletes a post
     *
     * @param string $slug
     *
     * @return bool
     *
     **/
    public static function delete($slug)
    {
        if (!self::isAllowedCaller()) {
            return false;
        }

        // If this post is the custom homepage, update settings
        if ($slug === Setting::getOne('homepage')) {
            Setting::update('homepage', '');
        }

        $evt = new Delete($slug);
        Leafpub::dispatchEvent(Delete::NAME, $evt);

        // Delete the post
        try {
            $postId = self::getOne($slug)['id'];
            // Cleanup history
            History::flush($slug);

            // Delete post_uploads
            $table = new Tables\PostUploads();
            $table->delete(['post' => $postId]);

            // Delete post_tags
            $table = new Tables\PostTags();
            $table->delete(['post' => $postId]);

            $rowCount = self::getModel()->delete(['slug' => $slug]);

            if ($rowCount === 0) {
                return false;
            }
        } catch (\PDOException $e) {
            return false;
        }

        $evt = new Deleted($slug);
        Leafpub::dispatchEvent(Deleted::NAME, $evt);

        return true;
    }

    /**
     * Returns the total number of posts that exist
     *
     * @param array $options
     *
     * @return mixed
     *
     **/
    public static function count($options = null)
    {
        // Merge options
        $options = array_merge([
            'query' => null,
            'author' => null,
            'end_date' => date('Y-m-d H:i:s'),
            'status' => 'published',
            'show_featured' => false,
            'ignore_featured' => false,
            'ignore_sticky' => false,
            'ignore_pages' => true,
            'start_date' => null,
            'tag' => null,
        ], (array) $options);

        $is_fulltext = $options['query'] && strlen($options['query']) >= 4;
        $prefix = Tables\TableGateway::$prefix;
        $select = new \Zend\Db\Sql\Sql(self::getModel()->getAdapter());
        $select = $select->select();
        $select->from($prefix . 'view_posts');

        // Convert dates to UTC
        if (isset($options['start_date'])) {
            $start_date = Leafpub::localToUtc($options['start_date']);
        }
        if (isset($options['end_date'])) {
            $end_date = Leafpub::localToUtc($options['end_date']);
        }

        $where = function ($wh) use ($options, $prefix, $is_fulltext) {
            if ($is_fulltext) {
                // Fulltext search
                $wh->expression('MATCH(slug, title, content) AGAINST(?)', $options['query']);
            } else {
                $wh->expression('CONCAT(slug, title) LIKE ?', '%' . $options['query'] . '%');
            }

            // Add options to query
            if (isset($options['author'])) {
                $wh->equalTo('author', $options['author']);
            }

            if (isset($options['tag'])) {
                $wh->expression(
                    '(
                        SELECT COUNT(*) from ' . $prefix . 'tags
                        LEFT JOIN ' . $prefix . 'post_tags ON ' . $prefix . 'post_tags.tag = ' . $prefix . 'tags.id
                        WHERE ' . $prefix . 'post_tags.post = ' . $prefix . 'view_posts.id AND ' . $prefix . 'tags.slug = ?
                    ) = 1',
                    $options['tag']
                );
            }

            if (isset($options['status'])) {
                $wh->equalTo('status', $options['status']);
            }

            if (isset($options['ignore_featured'])) {
                $wh->notEqualTo('featured', 1);
            }

            if (isset($options['ignore_sticky'])) {
                $wh->notEqualTo('sticky', 1);
            }

            if (isset($options['ignore_pages'])) {
                $wh->notEqualTo('page', 1);
            }

            if (isset($options['start_date'])) {
                $wh->greateThanOrEqualTo('pub_date', $options['start_date']);
            }

            if (isset($options['end_date'])) {
                $wh->lessThanOrEqualTo('pub_date', $options['end_date']);
            }
        };

        // Fetch results
        try {
            $model = self::getModel();
            $select->columns(['num' => new \Zend\Db\Sql\Expression('COUNT(*)')]);
            if ($where !== null) {
                $select->where($where);
            }
            $ret = $model->selectWith($select);

            return $ret->current()['num'];
        } catch (\PDOException $e) {
            return false;
        }
    }

    /**
     * Tells whether a post exists
     *
     * @param string $slug
     *
     * @return bool
     *
     **/
    public static function exists($slug)
    {
        try {
            $ret = self::getModel()->select(['slug' => $slug]);

            return (bool) $ret->current();
        } catch (\PDOException $e) {
            return false;
        }
    }

    /**
     * Gets one public post immediately before or after the target post
     *
     * @param string $slug
     * @param null   $options
     *
     * @return mixed
     *
     **/
    public static function getAdjacent($slug, $options = null)
    {
        // Merge options
        $options = array_merge([
            'author' => null,
            'direction' => 'next',
            'end_date' => date('Y-m-d H:i:s'),
            'status' => 'published',
            'ignore_featured' => false,
            'ignore_sticky' => false,
            'ignore_pages' => true,
            'start_date' => null,
            'tag' => null,
        ], (array) $options);

        $model = self::getModel();

        $prefix = Tables\TableGateway::$prefix;
        $select = new \Zend\Db\Sql\Sql(self::getModel()->getAdapter());
        $select = $select->select();
        $select->from($prefix . 'view_posts');

        // Convert dates to UTC
        if (isset($options['start_date'])) {
            $start_date = Leafpub::localToUtc($options['start_date']);
        }
        if (isset($options['end_date'])) {
            $end_date = Leafpub::localToUtc($options['end_date']);
        }

        $where = function ($wh) use ($options, $prefix, $slug) {
            if (isset($options['author'])) {
                $wh->equalTo('author', $options['author']);
            }

            if (isset($options['tag'])) {
                $wh->expression(
                    '(
                        SELECT COUNT(*) from ' . $prefix . 'tags
                        LEFT JOIN ' . $prefix . 'post_tags ON ' . $prefix . 'post_tags.tag = ' . $prefix . 'tags.id
                        WHERE ' . $prefix . 'post_tags.post = ' . $prefix . 'view_posts.id AND ' . $prefix . 'tags.slug = ?
                    ) = 1',
                    $options['tag']
                );
            }

            if (isset($options['status'])) {
                $wh->in('status', (array) $options['status']);
            }

            if (isset($options['ignore_featured'])) {
                $wh->notEqualTo('featured', 1);
            }

            if (isset($options['ignore_sticky'])) {
                $wh->notEqualTo('sticky', 1);
            }

            if (isset($options['ignore_pages'])) {
                $wh->notEqualTo('page', 1);
            }

            if (isset($options['start_date'])) {
                $wh->greaterThanOrEqualTo('pub_date', $options['start_date']);
            }

            if (isset($options['end_date'])) {
                $wh->lessThanOrEqualTo('pub_date', $options['end_date']);
            }

            // Determine direction
            $sort = $options['direction'] === 'next' ? 'ASC' : 'DESC';
            $compare = $options['direction'] === 'next' ? '>=' : '<=';

            $wh->notEqualTo('slug', $slug);

            $wh->expression(
                'CONCAT(pub_date, id) ' . $compare . ' (
                    SELECT CONCAT(pub_date, id)
                    FROM ' . $prefix . 'view_posts
                    WHERE slug = ?
                )',
                $slug);
        };

        $sort = $options['direction'] === 'next' ? 'ASC' : 'DESC';

        $select->where($where);
        $select->order('pub_date ' . $sort);
        $select->limit(1);

        try {
            $posts = $model->selectWith($select)->toArray();
            if ($posts === []) {
                return false;
            }
            $post = $posts[0];
        } catch (\PDOException $e) {
            return false;
        }

        // Normalize fields
        $post = self::normalize($post);

        return $post;
    }

    /**
     * Gets suggested posts for the target post
     *
     * @param string $slug
     * @param null   $options
     *
     * @return mixed
     *
     **/
    public static function getSuggested($slug, $options = null)
    {
        // Merge options
        $options = array_merge([
            'author' => null,
            'end_date' => date('Y-m-d H:i:s'),
            'status' => 'published',
            'ignore_featured' => false,
            'ignore_sticky' => false,
            'ignore_pages' => true,
            'max' => 5,
            'start_date' => null,
            'tag' => null,
        ], (array) $options);

        // Convert dates to UTC
        if (isset($options['start_date'])) {
            $start_date = Leafpub::localToUtc($options['start_date']);
        }
        if (isset($options['end_date'])) {
            $end_date = Leafpub::localToUtc($options['end_date']);
        }

        $prefix = Tables\TableGateway::$prefix;
        $select = new \Zend\Db\Sql\Sql(self::getModel()->getAdapter());
        $select = $select->select();
        $select->from($prefix . 'view_posts');
        $select->join(['b' => $prefix . 'post_tags'], 'b.post = ' . $prefix . 'view_posts.id', [], 'left');

        $where = function ($wh) use ($options, $prefix, $slug) {
            $wh->notEqualTo($prefix . 'view_posts.slug', $slug);

            if (isset($options['author'])) {
                $wh->equalTo('author', $options['author']);
            }

            if (isset($options['tag'])) {
                $wh->expression(
                    '(
                        SELECT COUNT(*) from ' . $prefix . 'tags
                        LEFT JOIN ' . $prefix . 'post_tags ON ' . $prefix . 'post_tags.tag = ' . $prefix . 'tags.id
                        WHERE ' . $prefix . 'post_tags.post = ' . $prefix . 'view_posts.id AND slug = ?
                    ) = 1',
                    $options['tag']
                );
            }

            if (isset($options['status'])) {
                $wh->expression('status', implode(',', (array) $options['status']));
            }

            if (isset($options['ignore_featured'])) {
                $wh->notEqualTo('featured', 1);
            }

            if (isset($options['ignore_sticky'])) {
                $wh->notEqualTo('sticky', 1);
            }

            if (isset($options['ignore_pages'])) {
                $wh->notEqualTo('page', 1);
            }

            if (isset($options['start_date'])) {
                $wh->greaterThanOrEqualTo('pub_date', $options['start_date']);
            }

            if (isset($options['end_date'])) {
                $wh->lessThanOrEqualTo('pub_date', $options['end_date']);
            }

            $table = new Tables\PostTags();
            $select1 = $table->getSql()->select()
                                       ->columns(['tag'])
                                       ->join(['c' => $prefix . 'posts'], $prefix . 'post_tags.post = c.id', [], 'left')
                                       ->where(function ($wh) use ($slug) {
                                           $wh->equalTo('c.slug', $slug);
                                       });

            $wh->in('b.tag', $select1);
        };

        $select->where($where)
               ->order($prefix . 'view_posts.pub_date')
               ->limit($options['max']);

        // Get matching posts
        try {
            $model = self::getModel();
            $posts = $model->selectWith($select)->toArray();
            if (!$posts) {
                return false;
            }
        } catch (\PDOException $e) {
            return false;
        }

        // Normalize fields
        foreach ($posts as $key => $value) {
            $posts[$key] = self::normalize($value);
        }

        return $posts;
    }

    /**
     * Tells whether or not a post is e to the public
     *
     * @param string $post_or_slug
     *
     * @return bool
     *
     **/
    public static function isVisible($post_or_slug)
    {
        // Get the post
        $post = is_string($post_or_slug) ? self::getOne($post_or_slug) : $post_or_slug;
        if (!$post) {
            return false;
        }

        // Make sure pub date is a valid date format
        $post['pub_date'] = Leafpub::parseDate($post['pub_date']);
        $pub_date = new \DateTime($post['pub_date']);
        $pub_date->setTimeZone(new \DateTimeZone('UTC'));

        // Is it in the future?
        $now = new \DateTime('now');
        $now->setTimeZone(new \DateTimeZone('UTC'));
        if ($pub_date > $now) {
            return false;
        }

        // Is is published?
        if ($post['status'] !== 'published') {
            return false;
        }

        return true;
    }

    /**
     * Renders a post
     *
     * @param string $slug_or_post
     * @param array   $options
     *
     * @return mixed
     *
     **/
    public static function render($slug_or_post, array $options = [])
    {
        // Get the post
        if (is_array($slug_or_post)) {
            $post = $slug_or_post;
        } else {
            $post = self::getOne($slug_or_post);
            if (!$post) {
                return false;
            }
        }

        // Get the author
        $author = User::getOne($post['author']);

        // Make sure pub date is a valid date format
        $post['pub_date'] = Leafpub::parseDate($post['pub_date']);

        // Only render if it's visible to the public or a preview
        if (!self::isVisible($post) && isset($options['preview']) && !$options['preview']) {
            return false;
        }

        // Determine which template to use
        if (isset($options['zen'])) {
            $template = Leafpub::path('source/templates/editor.zen.hbs');
        } else {
            $template = Theme::getPath($post['page'] ? 'page.hbs' : 'post.hbs');
        }

        // Generate event
        $beforeRender = new BeforeRender([
            'post' => $post,
            'special_vars' => [
                'meta' => [
                    'embed_media' => $options['embed_media'] ?? false,
                    'embed_social' => $options['embed_social'] ?? false,
                    'editable' => $options['editable'] ?? false,
                    'preview' => $options['preview'] ?? false,
                    'title' => !empty($post['meta_title']) ? $post['meta_title'] : $post['title'],
                    'description' => !empty($post['meta_description']) ?
                        $post['meta_description'] :
                        Leafpub::getChars(strip_tags($post['content']), 160),
                    // JSON linked data (schema.org)
                    'ld_json' => [
                        '@context' => 'https://schema.org',
                        '@type' => 'Article',
                        'mainEntityOfPage' => [
                            '@type' => 'WebPage',
                            '@id' => self::url($post['slug']),
                        ],
                        'publisher' => [
                            '@type' => 'Organization',
                            'name' => Setting::getOne('title'),
                            'logo' => !empty(Setting::getOne('logo')) ?
                                [
                                    '@type' => 'ImageObject',
                                    'url' => Leafpub::url(Setting::getOne('logo')),
                                 ] : null,
                            ],
                        'author' => [
                            '@type' => 'Person',
                            'name' => $author['name'],
                            'description' => strip_tags(Leafpub::markdownToHtml($author['bio'])),
                            'image' => !empty($author['avatar']) ?
                                [
                                    '@type' => 'ImageObject',
                                    'url' => Leafpub::url($author['avatar']),
                                ] : null,
                            'sameAs' => !empty($author['website']) ?
                                [$author['website']] : null,
                        ],
                        'url' => self::url($post['slug']),
                        'headline' => !empty($post['meta_title']) ?
                            $post['meta_title'] :
                            $post['title'],
                        'description' => !empty($post['meta_description']) ?
                            $post['meta_description'] :
                            Leafpub::getWords(strip_tags($post['content']), 50),
                        'image' => empty($post['image']) ? null : [
                                '@type' => 'ImageObject',
                                'url' => Leafpub::url($post['image']),
                                'width' => 0,
                                'height' => 0,
                            ],
                        'datePublished' => Leafpub::strftime('%FT%TZ', strtotime($post['pub_date'])),
                        'dateModified' => Leafpub::strftime('%FT%TZ', strtotime($post['pub_date'])),
                    ],
                    'open_graph' => [
                        'og:type' => 'article',
                        'og:site_name' => Setting::getOne('title'),
                        'og:title' => !empty($post['meta_title']) ?
                            $post['meta_title'] :
                            $post['title'],
                        'og:description' => !empty($post['meta_description']) ?
                            $post['meta_description'] :
                            Leafpub::getWords(strip_tags($post['content']), 50),
                        'og:url' => self::url($post['slug']),
                        'og:image' => empty($post['image']) ? '' : Leafpub::url($post['image']),
                        'article:published_time' => $post['page'] ?
                            null : Leafpub::strftime('%FT%TZ', strtotime($post['pub_date'])),
                        'article:modified_time' => $post['page'] ?
                            null : Leafpub::strftime('%FT%TZ', strtotime($post['pub_date'])),
                        'article:tag' => $post['page'] ?
                            null : implode(', ', (array) $post['tags']),
                    ],
                    'twitter_card' => [
                        'twitter:card' => !empty($post['image']) ?
                            'summary_large_image' :
                            'summary',
                        'twitter:site' => !empty(Setting::getOne('twitter')) ?
                            '@' . Setting::getOne('twitter') : null,
                        'twitter:title' => !empty($post['meta_title']) ?
                            $post['meta_title'] :
                            $post['title'],
                        'twitter:description' => !empty($post['meta_description']) ?
                            $post['meta_description'] :
                            Leafpub::getWords(strip_tags($post['content']), 50),
                        'twitter:creator' => !empty($author) ?
                            '@' . $author['twitter'] : null,
                        'twitter:url' => self::url($post['slug']),
                        'twitter:image' => !empty($post['image']) ?
                            Leafpub::url($post['image']) :
                            null,
                        'twitter:label1' => !$post['page'] ?
                            'Written by' : null,
                        'twitter:data1' => !$post['page'] ?
                            $author['name'] : null,
                        'twitter:label2' => !$post['page'] ?
                            'Tagged with' : null,
                        'twitter:data2' => !$post['page'] ?
                            implode(', ', (array) $post['tags']) : null,
                    ],
                ],
            ]
        ]);
        // Dispatch Event
        Leafpub::dispatchEvent(BeforeRender::NAME, $beforeRender);
        // Get data from our dispatched event...
        $data = $beforeRender->getEventData();

        // Render it
        $html = Renderer::render([
            'template' => $template,
            'data' => [
                'post' => $data['post'],
            ],
            'special_vars' => $data['special_vars'],

            'helpers' => ['theme', 'url', 'utility'],
            // If we're editing or previewing, don't pass in user data to simulate what an
            // unauthenticated user would see.
            'user' => (isset($options['editable']) || isset($options['preview'])) ? false : Session::user(),
        ]);

        // Check for required helpers
        if (isset($options['editable'])) {
            // There's no reliable way to check for the existence of a Handlebar helper without
            // parsing the template file and all of the partials it uses before rendering. As a
            // workaround, we check for certain known strings that will be in the HTML when a post
            // is rendered.
            foreach ([
                // The helper       // The string to search for
                '{{title editable="true"}}' => '<div data-leafpub-id="post:title"',
                '{{content editable="true"}}' => '<div data-leafpub-id="post:content"',
                '{{leafpub_head}}' => '<!--{{leafpub_head}}-->',
                '{{leafpub_foot}}' => '<!--{{leafpub_foot}}-->',
            ] as $helper => $test_string) {
                if (strpos($html, $test_string) === false) {
                    throw new \Exception("The $helper helper is missing in $template.");
                }
            }
        }

        // Append a <base> tag for editable posts and post previews so they render properly no
        // matter where the rendering document exists.
        if (isset($options['editable']) || isset($options['preview'])) {
            $html = str_replace(
                '<!--{{leafpub_head}}-->',
                '<!--{{leafpub_head}}--><base href="' .
                    // The base should always end with a slash
                    htmlspecialchars(rtrim(self::url(), '/')) . '/">',
                $html
            );
        }

        return $html;
    }

    /**
     * Gets the posts for the specified tagId.
     *
     * @param int $post_id
     *
     * @return mixed
     *
     **/
    public static function getPostsToTag($tagId)
    {
        try {
            $table = new Tables\PostTags();
            $select1 = $table->getSql()->select()
                                        ->columns(['post'])
                                        ->where(function ($wh) use ($tagId) {
                                            $wh->equalTo('tag', $tagId);
                                        });

            $model = self::getModel();
            $select = self::getModel()->getSql()->select()
                                                ->columns(['slug'])
                                                ->where(function ($wh) use ($select1) {
                                                    $wh->in('id', $select1);
                                                });

            $ret = $model->selectWith($select)->toArray();
            foreach ($ret as $itm) {
                $posts[] = $itm['slug'];
            }

            return $posts;
        } catch (\Exception $e) {
            return false;
        }
    }

    /**
     * Gets the Posts for the specified media file.
     *
     * @param int $mediaId
     *
     * @return mixed
     *
     **/
    public static function getPostsToUpload($mediaId)
    {
        $posts = [];
        try {
            $table = new Tables\PostUploads();
            $select1 = $table->getSql()->select()
                                        ->columns(['post'])
                                        ->where(function ($wh) use ($mediaId) {
                                            $wh->equalTo('upload', $mediaId);
                                        });

            $model = self::getModel();
            $select = self::getModel()->getSql()->select()
                                                ->columns(['slug'])
                                                ->where(function ($wh) use ($select1) {
                                                    $wh->in('id', $select1);
                                                });

            $ret = $model->selectWith($select)->toArray();
            foreach ($ret as $itm) {
                $posts[] = $itm['slug'];
            }

            return $posts;
        } catch (\Exception $e) {
            return false;
        }
    }

    // Assign posts to new user
    public static function updateRecepient($oldAuthorId, $newAuthorId)
    {
        if (!self::isAllowedCaller()) {
            return false;
        }

        try {
            return self::getModel()->update(['author' => $newAuthorId], ['author' => $oldAuthorId]);
        } catch (\Exception $e) {
            return false;
        }
    }

    public static function increaseViewCount($slug)
    {
        $id = self::getOne($slug)['id'];
        $vc = PostMeta::getOne(['post' => $id, 'name' => 'viewCount'])['value'];
        if (!$vc) {
            return PostMeta::create(['name' => 'viewCount', 'value' => 1, 'post' => $id]);
        }
        ++$vc;

        return PostMeta::edit(['name' => 'viewCount', 'value' => $vc, 'post' => $id]);
    }

    public static function lockPostForEdit($post_id)
    {
        try {
            PostMeta::create([
                'post' => $post_id,
                'name' => 'lock',
                'value' => Session::user('slug'),
            ]);
        } catch (\Exception $e) {
            return false;
        }
    }

    public static function unlockPostAfterEdit($post_id)
    {
        try {
            return PostMeta::delete(['post' => $post_id, 'name' => 'lock']);
        } catch (\Exception $e) {
            return false;
        }
    }

    /**
     * Returns a post URL
     *
     * @param string $slug
     *
     * @return string
     *
     **/
    public static function url($slug = '')
    {
        // example.com/slug
        return Leafpub::url($slug);
    }

    protected static function getModel()
    {
        if (self::$_instance == null) {
            self::$_instance = new Tables\Post();
        }

        return self::$_instance;
    }

    protected static function ampifyImageTags($content)
    {
        $content = str_replace('<img', '<amp-img', $content);
        $embed_media = [];
        $embed_social = [];

        $doc = new \DOMDocument();
        // see http://stackoverflow.com/a/8218649
        @$doc->loadHTML(iconv('HTML-ENTITIES', 'UTF-8', $content));

        $tags = $doc->getElementsByTagName('amp-img');
        foreach ($tags as $tag) {
            if ($tag->hasAttribute('srcset')) {
                $tag->setAttribute('layout', 'responsive');
            } else {
                $tag->setAttribute('layout', 'fixed');
            }
        }

        $tags = $doc->getElementsByTagName('figcaption');
        foreach ($tags as $tag) {
            $tag->removeAttribute('contenteditable');
        }

        $tags = $doc->getElementsByTagName('iframe');
        $length = $tags->length;
        for ($i = 0; $i < $length; ++$i) {//$tags as $tag){
            $tag = $tags[0];
            $parent = $tag->parentNode;
            $src = $tag->getAttribute('src');

            if (mb_stristr($src, 'youtube')) {
                if (!in_array('youtube', $embed_media)) {
                    $embed_media[] = 'youtube';
                }
                $newNode = $parent->appendChild(new \DOMElement('amp-youtube'));
                $src = preg_replace('/https:\/\/www.youtube.com\/embed\//', '', $src);
                $src = stristr($src, '?', true);
                $newNode->setAttribute('data-videoid', $src);
                $newNode->setAttribute('layout', 'responsive');
                $newNode->setAttribute('width', $tag->getAttribute('width'));
                $newNode->setAttribute('height', $tag->getAttribute('height'));
            } elseif (mb_stristr($src, 'vimeo')) {
                if (!in_array('vimeo', $embed_media)) {
                    $embed_media[] = 'vimeo';
                }
                $newNode = $parent->appendChild(new \DOMElement('amp-vimeo'));
                $newNode->setAttribute('data-videoid', substr(strrchr($src, '/'), 1));
                $newNode->setAttribute('layout', 'responsive');
                $newNode->setAttribute('width', $tag->getAttribute('width'));
                $newNode->setAttribute('height', $tag->getAttribute('height'));
            } elseif (mb_stristr($src, 'soundcloud')) {
                if (!in_array('soundcloud', $embed_media)) {
                    $embed_media[] = 'soundcloud';
                }
                $newNode = new \DOMElement('amp-soundcloud');
                $newNode->setAttribute('data-trackid', 'mGENRKrdoGY');
                $newNode->setAttribute('layout', 'fixed-height');
                $newNode->setAttribute('data-visual', true);
                $newNode->setAttribute('height', $tag->getAttribute('height'));
            } elseif (mb_stristr($src, 'facebook')) {
                if (!in_array('facebook', $embed_social)) {
                    $embed_social[] = 'facebook';
                }
                $newNode = $parent->appendChild(new \DOMElement('amp-facebook'));
                $src = urldecode(stristr(substr(stristr($src, '='), 1), '&', true));
                $newNode->setAttribute('data-href', $src);
                $newNode->setAttribute('layout', 'responsive');
                $newNode->setAttribute('width', $tag->getAttribute('width'));
                $newNode->setAttribute('height', $tag->getAttribute('height'));
            } /*elseif (mb_stristr($src, 'twitter')){
                if ($embed_social === 'false' || $embed_social === 'twitter'){
                    $embed_social = 'twitter';
                    $newNode = $parent->appendChild(new \DOMElement('amp-twitter'));
                    $newNode->setAttribute('data-tweetid', substr(strrchr($src, '/'), 1));
                    $newNode->setAttribute('layout', "responsive");
                    $newNode->setAttribute('width', $tag->getAttribute('width'));
                    $newNode->setAttribute('height', $tag->getAttribute('height'));
                }
            }*/
            $parent->removeChild($tag);
        }

        $html = preg_replace('/^<!DOCTYPE.+?>/', '', str_replace(['<html>', '</html>', '<body>', '</body>'], ['', '', '', ''], $doc->saveHTML()));

        return ['html' => $html, 'embed_media' => $embed_media, 'embed_social' => $embed_social];
    }

    /**
     * Gets the tags for the specified post.
     *
     * @param int $post_id
     *
     * @return mixed
     *
     **/
    private static function getTags($post_id)
    {
        try {
            return Tag::getTagsToPost($post_id);
        } catch (\PDOException $e) {
            return false;
        }
    }

    /**
     * Gets the uploads for the specified post.
     *
     * @param int $post_id
     *
     * @return mixed
     *
     **/
    private static function getUploads($post_id)
    {
        try {
            return Upload::getUploadsToPost($post_id);
        } catch (\PDOException $e) {
            return false;
        }
    }

    private static function getPostMeta($post_id)
    {
        $ret = [];
        try {
            $meta = PostMeta::getMany(['post' => $post_id]);
            foreach ($meta as $met) {
                $ret[$met['name']] = [$met['value'], $met['created']];
            }
            if (isset($ret['lock'])) {
                $time = strtotime(Leafpub::utcToLocal($ret['lock'][1]));
                $diff = date('U') - $time;
                // If difference between lock date and now is gt 1 unlock automatically
                if (round($diff / (3600 * 24)) >= 1) {
                    self::unlockPostAfterEdit($post_id);
                    unset($ret['lock']);
                }
            }

            return $ret;
        } catch (\Exception $e) {
            Leafpub::getLogger()->debug($e->getMessage());

            return false;
        }
    }

    /**
     * Normalize data types for certain fields
     *
     * @param array $post
     *
     * @return array
     *
     **/
    private static function normalize($post)
    {
        // Cast to integer
        $post['id'] = (int) $post['id'];
        $post['page'] = (int) $post['page'];
        $post['featured'] = (int) $post['featured'];
        $post['sticky'] = (int) $post['sticky'];
        $post['content'] = preg_replace('/content\/uploads\/[0-9]{4}\/[0-9]{2}/', 'img', $post['content']);

        // Convert dates from UTC to local
        $post['created'] = Leafpub::utcToLocal($post['created']);
        $post['pub_date'] = Leafpub::utcToLocal($post['pub_date']);

        // Append tags
        $post['tags'] = self::getTags($post['id']);
        $post['media'] = self::getUploads($post['id']);
        $post['meta'] = self::getPostMeta($post['id']);

        return $post;
    }

    /**
     * Sets the tags for the specified post. To remove all tags, call this method with $tags = null.
     *
     * @param int  $post_id
     * @param null $tags
     *
     * @return bool
     *
     **/
    private static function setTags($post_id, $tags = null)
    {
        $table = new Tables\PostTags();

        // Remove old tags
        try {
            $table->delete(['post' => $post_id]);
        } catch (\PDOException $e) {
            return false;
        }

        // Assign new tags
        if (count($tags) > 0) {
            // Escape slugs
            /*foreach($tags as $key => $value) {
                $tags[$key] = self::$database->quote($value);
            }*/
            // Assign tags
            try {
                foreach ($tags as $tag) {
                    $data = ['post' => $post_id, 'tag' => Tag::getOne($tag)['id']];
                    $table->insert($data);
                }
            } catch (\PDOException $e) {
                return false;
            }
        }

        return true;
    }

    /**
     * Save the image relations
     *
     * @param int    $post_id
     * @param string $content
     *
     * @return bool
     */
    private static function setImageToPost($post_id, $content)
    {
        $table = new Tables\PostUploads();

        try {
            $table->delete(['post' => $post_id]);
        } catch (\PDOException $e) {
            return false;
        }

        $matches = [];
        $doc = new \DOMDocument();
        @$doc->loadHTML($content);

        $tags = $doc->getElementsByTagName('img');

        foreach ($tags as $tag) {
            array_push($matches, $tag->getAttribute('src'));
        }

        if (count($matches) > 0) {
            // Assign tags
            try {
                foreach ($matches as $media) {
                    // After an import, it's possible that not all image paths could be updated.
                    // An image path that couldn't be found returns false, so the table insert would fail without
                    // an upload id
                    $imageId = Upload::getImageId($media);
                    if ($imageId !== 0) {
                        $data = ['post' => $post_id, 'upload' => $imageId];
                        $table->insert($data);
                    }
                }
            } catch (\PDOException $e) {
                return false;
            }
        }

        return true;
    }
}
